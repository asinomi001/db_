// account_system.js
const sqlite3 = require('sqlite3').verbose();
const readline = require('readline');
const crypto = require('crypto');
function hashPassword(password) { return crypto.createHash('sha256').update(password).digest('hex'); }
const db = new sqlite3.Database('accounts.db');
db.serialize(() => {
  db.run(`CREATE TABLE IF NOT EXISTS accounts (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT UNIQUE NOT NULL, password TEXT NOT NULL, email TEXT, is_admin INTEGER DEFAULT 0)`);
  db.get("SELECT COUNT(*) as cnt FROM accounts WHERE username = 'asiadmin'", (err, row) => {
    if (!row || row.cnt === 0) {
      db.run("INSERT INTO accounts (username, password, email, is_admin) VALUES (?, ?, ?, 1)",
        ["asiadmin", hashPassword("passasinomi"), "admin@example.com"]);
      console.log("‚úÖ –ê–¥–º–∏–Ω-–∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω (asiadmin / passasinomi)");
    }
  });
});
const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
function ask(question) { return new Promise(resolve => rl.question(question, answer => resolve(answer))); }
async function main() {
  console.log("üîê –í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
  const login = await ask("–õ–æ–≥–∏–Ω: ");
  const pass = await ask("–ü–∞—Ä–æ–ª—å: ");
  db.get("SELECT password, is_admin FROM accounts WHERE username = ?", [login], async (err, row) => {
    if (row && row.password === hashPassword(pass) && row.is_admin) {
      console.log("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.");
      while (true) {
        console.log("\\n–ú–µ–Ω—é:\\n1. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\n2. –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\\n3. –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\n4. –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞\\n5. –í—ã—Ö–æ–¥");
        const choice = await ask("–í–∞—à –≤—ã–±–æ—Ä: ");
        if (choice === "1") {
          const u = await ask("–õ–æ–≥–∏–Ω: "); const p = await ask("–ü–∞—Ä–æ–ª—å: "); const e = await ask("Email: ");
          db.run("INSERT INTO accounts (username, password, email) VALUES (?, ?, ?)", [u, hashPassword(p), e], function (err) {
            if (err) console.log("‚ùå –û—à–∏–±–∫–∞: –ª–æ–≥–∏–Ω –∑–∞–Ω—è—Ç."); else console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω.");
          });
        } else if (choice === "2") {
          db.all("SELECT id, username, email, is_admin FROM accounts", [], (err, rows) => {
            console.log("üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:"); rows.forEach(r => { console.log(`${r.id} | ${r.username} | ${r.email || ""} | ${r.is_admin ? "ADMIN" : "USER"}`); });
          });
        } else if (choice === "3") {
          const u = await ask("–õ–æ–≥–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: "); db.run("DELETE FROM accounts WHERE username = ? AND is_admin = 0", [u], function(err) {
            if (this && this.changes>0) console.log("‚úÖ –£–¥–∞–ª–µ–Ω–æ"); else console.log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω");
          });
        } else if (choice === "4") {
          const np = await ask("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞: "); db.run("UPDATE accounts SET password = ? WHERE username = 'asiadmin'", [hashPassword(np)], function(err){ console.log("‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω"); });
        } else if (choice === "5") { console.log("üëã –í—ã—Ö–æ–¥"); rl.close(); db.close(); break; } else { console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"); }
      }
    } else { console.log("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É."); rl.close(); db.close(); }
  });
}
main();